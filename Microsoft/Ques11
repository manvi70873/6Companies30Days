class Solution {
public:
    int countPaths(int n, vector<vector<int>>& r) {
        //Dijkastra algo
        long long mod=1000000007;
        vector<long long>dis(n,LONG_MAX);
        vector<long long>p(n);
        vector<vector<pair<long long,long long>>>adj(n);

        for(int i=0;i<r.size();i++){
            adj[r[i][0]].push_back({r[i][1],r[i][2]});
            adj[r[i][1]].push_back({r[i][0],r[i][2]});
        }

        priority_queue <pair<long long,long long>, vector<pair<long long,long long>>, greater<pair<long long,long long>>>pq;

        dis[0]=0;
        p[0]=1;
        pq.push({dis[0],0});

        while(!pq.empty()){
            pair<long long,long long> top=pq.top();
            long long wt=top.first;
            long long curr_ver=top.second;
            pq.pop();

            for(auto i:adj[curr_ver]){
                long long v=i.first;
                long long t=i.second;
                long long nw=wt+t;

                if(nw < dis[v])
                {
                    dis[v] = nw;
                    pq.push({dis[v],v});
                    p[v] = p[curr_ver]; 
                }
                
                else if(nw == dis[v])
                {
                    p[v] = (p[v] + p[curr_ver])%mod;  
                }
            }
        }
        return p[n-1]%mod;
    }
};
